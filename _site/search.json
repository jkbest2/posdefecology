[
  {
    "objectID": "posts.html",
    "href": "posts.html",
    "title": "Posts",
    "section": "",
    "text": "Order By\n       Default\n         \n          Title\n        \n         \n          Date - Oldest\n        \n         \n          Date - Newest\n        \n         \n          Author\n        \n     \n  \n    \n      \n      \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nwebsite\n\n\nQuarto\n\n\nCV\n\n\n\n\nMoving my website to Quarto from Hugo Academic/Wowchemy\n\n\n\n\n\n\nApr 7, 2022\n\n\nJohn Best\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nhyak\n\n\nR\n\n\n\n\nHow to compile the rgdal package and its dependencies.\n\n\n\n\n\n\nNov 3, 2020\n\n\nJohn Best\n\n\n\n\n\n\n  \n\n\n\n\n\n\n\n\n\n\nhyak\n\n\n\n\nNOTE: This information was accurate as of early 2020, but is now (April 2022) slightly out of date; e.g. the klone cluster is now available and interactive nodes are no longer a separate partition.\n\n\n\n\n\n\nFeb 24, 2020\n\n\nJohn Best\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nQERM 597 Seminar\n\n\n\n\nQERM\n\n\nwebsite\n\n\n\n\nUse Git, GitHub, and blogdown to publish an example website on GitHub Pages\n\n\n\n\n\n\nJan 28, 2020\n\n\nJohn Best\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nhyak\n\n\nR\n\n\n\n\nFirst, request a build node, which will have internet access. An hour of time should be enough to install R and a few packages. Building R (especially the suggested packages) can be sped up by using multiple build jobs.\n\n\n\n\n\n\nJan 10, 2020\n\n\nJohn Best\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "John K. Best",
    "section": "",
    "text": "When I’m not working I spend time with my family, play with my dog, run, and learn about whatever new and exciting hobby I’ve more recently found."
  },
  {
    "objectID": "posts/compiling-r-with-mkl-on-hyak/compiling-r-with-intel-compilers-and-mkl-on-hyak.html",
    "href": "posts/compiling-r-with-mkl-on-hyak/compiling-r-with-intel-compilers-and-mkl-on-hyak.html",
    "title": "Compiling R with Intel compilers and MKL on Hyak",
    "section": "",
    "text": "Build and install R\nThis part is pretty easy once configuration is complete. The -j flag can be used to specify the maximum number of parallel jobs to run. This should be equal to the --cpus-per-task specified when you requested the build node.\nmake -j8\nInstallation can be accomplised using\nmake install\nFinally, add the R and Rscript executables to your PATH.\n\n\nTesting the installation\nIn order to use multiple cores on a compute node, the --cpus-per-task flag must be greater than one. Note that --tasks-per-node does not allow multiple threads to be used by a single process. Watching CPU usage with e.g. htop will tell you if multithreaded linear algebra is working. So, using an interactive compute node (such as stf-int) open your newly-compiled version of R and running\nX <- matrix(rnorm(5000 * 5000), nrow = 5000)\nt(X) %*% X\nYou should see multiple CPUs being used at 100% in htop. If only one CPU is maxed out, something went wrong."
  },
  {
    "objectID": "posts/qerm-website-prep/qerm-website-prep.html",
    "href": "posts/qerm-website-prep/qerm-website-prep.html",
    "title": "Set up a website for GitHub Pages",
    "section": "",
    "text": "We would like everyone to run a few steps before class on Wednesday so that we can concentrate on the interesting parts such as customization and personalization. We will be following the steps outlined in the presentations from the Summer of blogdown slides by Alison Hill of RStudio. We will deviate from these by using GitHub pages for hosting rather than Netlify. We’ll be happy to explain the advantages and disadvantages of each in class if anyone is interested. The blogdown package uses the static site generator Hugo (we will explain what this means in class)"
  },
  {
    "objectID": "posts/qerm-website-prep/qerm-website-prep.html#prerequisites",
    "href": "posts/qerm-website-prep/qerm-website-prep.html#prerequisites",
    "title": "Set up a website for GitHub Pages",
    "section": "Prerequisites",
    "text": "Prerequisites\nBecause we are hosting on GitHub Pages, we need to create two separate repositories. We will following the instructions from Hugo. First we will create a repository to contain the files that we edit to change the website. On GitHub, create an empty (no README or .gitignore) repository named website.\nThe second repository will hold the rendered version of the site. The name of this repository does matter; it must be USER.github.io (where USER is your GitHub username). This should also be an empty repository.\nCreate a directory named website and initialize a Git repository.\nmkdir website\ncd website\ngit init\nThen tell Git how to find the corresponding GitHub repository.\ngit remote add origin https://github.com/USER/website.git\nNow open R with website as your working directory (you can check this with getwd).\nWe will be using the blogdown package to simplify the creation of our website. So the first step is to install blogdown if it is not already installed. As usual, this can be done with\n\ninstall.packages(\"blogdown\")\n\nEvery time we want to use blogdown after this, we can use\n\nlibrary(blogdown)\n\nOnce blogdown is installed, we need to install Hugo, our static site generator. blogdown makes this easy; just run (in R)\n\ninstall_hugo()\n\nThe blogdown package also includes update_hugo and hugo_version functions."
  },
  {
    "objectID": "posts/qerm-website-prep/qerm-website-prep.html#create-the-website",
    "href": "posts/qerm-website-prep/qerm-website-prep.html#create-the-website",
    "title": "Set up a website for GitHub Pages",
    "section": "Create the website",
    "text": "Create the website\nNow we can create the website. I will use the Academic theme, which I use for my personal website. There are many, many others to choose from.\nAgain, blogdown provides a convenient way to start a new site.\n\nnew_site(theme = \"gcushen/hugo-academic\",\n         sample = TRUE,\n         theme_example = TRUE,\n         empty_dirs = TRUE,\n         to_yaml = TRUE)\n\nThis should open your browser to the example site.\n\n\n\nIf it doesn’t open automatically, you can go to https://localhost:4321. In the future, any time you’re in the working directory for your website, you can use the blogdown::serve_site function to do the same thing. This will live-reload any time you make changes."
  },
  {
    "objectID": "posts/qerm-website-prep/qerm-website-prep.html#set-up-the-git-structure",
    "href": "posts/qerm-website-prep/qerm-website-prep.html#set-up-the-git-structure",
    "title": "Set up a website for GitHub Pages",
    "section": "Set up the Git structure",
    "text": "Set up the Git structure\nThe rest of these instructions are in the terminal (i.e., not in R) and assume that you are starting from the website directory.\nThe public subdirectory of website contains the HTML of our rendered website. This needs to be uploaded to your USER.github.io GitHub repository. At the terminal, starting from the website directory, we want to:\n\nchange to the public subdirectory;\ninitialize a Git repository;\nadd the GitHub remote;\nstage all the files;\ncommit them;\nand push them to GitHub.\n\nThis can be accomplished by running\ncd public\ngit init\ngit remote add origin https://github.com/USER/USER.github.io.git\ngit add .\ngit commit -m \"Intialize with rendered example site\"\ngit push -u origin master\nWe also want to track the rest of the files in website, because these are the ones we edit by hand to change the content of the website. To do this, we\n\nchange back to the website directory;\nadd the public directory as a submodule (a Git repository within a Git repository);\nstage everything;\ncommit everything;\nand push it up to GitHub.\n\ncd ..\ngit submodule add -b master https://github.com/USER/USER.github.io.git public\ngit add .\ngit commit -m \"Initialize with Academic example site\"\ngit push -u origin master\nYou should now see files in the repositories you pushed to on GitHub. If you pushed to the USER.github.io directory, you should also see the example site at https://USER.github.io. We will personalize these sites in class on Wednesday."
  },
  {
    "objectID": "posts/down-the-rgdal-rabbit-hole/down-the-rgdal-rabbit-hole.html",
    "href": "posts/down-the-rgdal-rabbit-hole/down-the-rgdal-rabbit-hole.html",
    "title": "Down the rgdal rabbit hole",
    "section": "",
    "text": "I have a package that depends on INLA, which has recently begun failing to load if rgdal isn’t installed correctly. rgdal can’t be installed without the GDAL library, which requires PROJ, which requires SQLite. I needed to install all of these on our cluster without root access. That meant compiling each one to a non-standard location, then ensuring that the next in the sequence knew where this was. It also meant that if I missed an option in, say SQLite, I had to start from the bottom and recompile everything."
  },
  {
    "objectID": "posts/down-the-rgdal-rabbit-hole/down-the-rgdal-rabbit-hole.html#sqlite",
    "href": "posts/down-the-rgdal-rabbit-hole/down-the-rgdal-rabbit-hole.html#sqlite",
    "title": "Down the rgdal rabbit hole",
    "section": "SQLite",
    "text": "SQLite\n\nDownload and untar the most recent SQLite amalgamation. I did not use the autoconf version.\nConfigure:\n\n./configure --prefix=/usr/lusers/jkbest/inst/sqlite-3.33.0 \\\n    CFLAGS=\"-DSQLITE_ENABLE_COLUMN_METADATA=1\"\nNote the CFLAGS here. Without that rgdal will fail to install with a message about table_columns or similar and you’ll need to start over from this step (ask me how I know!).\n\nCompile and install:\n\nmake -jN\nmake install\n\nUpdate $PATHs. In your .zshrc, .bashrc or similar, add entries to PATH for bin, LD_LIBRARY_PATH for lib, CPATH for include, and PKG_CONFIG_PATH for lib/pkgconfig. I don’t know which of these mattered, but it didn’t hurt to add them."
  },
  {
    "objectID": "posts/down-the-rgdal-rabbit-hole/down-the-rgdal-rabbit-hole.html#proj",
    "href": "posts/down-the-rgdal-rabbit-hole/down-the-rgdal-rabbit-hole.html#proj",
    "title": "Down the rgdal rabbit hole",
    "section": "PROJ",
    "text": "PROJ\n\nDownload and untar the latest version of PROJ.\nConfigure:\n\n./configure --prefix=$INSTALL_PATH/proj-7.2.0 \\\n    SQLITE3_CFLAGS=-I/usr/lusers/jkbest/inst/sqlite-3.33.0/include \\\n    SQLITE3_LIBS=\"-L/usr/lusers/jkbest/inst/sqlite-3.33.0/lib -lsqlite3\" \\\n    CPPFLAGS=-I/usr/lusers/jkbest/inst/sqlite-3.33.0/include \\\n    LDFLAGS=\"-L/usr/lusers/jkbest/inst/sqlite-3.33.0/lib -lsqlite3\"\n\nCompile and install:\n\nmake\nmake install\n\nUpdate PATH, LD_LIBRARY_PATH, PKG_CONFIG_PATH, and CPATH as described above."
  },
  {
    "objectID": "posts/down-the-rgdal-rabbit-hole/down-the-rgdal-rabbit-hole.html#gdal",
    "href": "posts/down-the-rgdal-rabbit-hole/down-the-rgdal-rabbit-hole.html#gdal",
    "title": "Down the rgdal rabbit hole",
    "section": "GDAL",
    "text": "GDAL\n\nDownload and untar the latest version of GDAL.\nConfigure:\n\n./configure --prefix=/usr/lusers/jkbest/inst/gdal-3.2.0\\\n    CFLAGS=\"-I/usr/lusers/jkbest/inst/proj-7.2.0/include -I/usr/lusers/jkbest/inst/sqlite-3.33.0/include\"\\\n    LIBS=\"-L/usr/lusers/jkbest/inst/proj-7.2.0/lib -lproj -L/usr/lusers/jkbest/inst/sqlite-3.33.0/lib -lsqlite3\" \\\n    CPPFLAGS=\"-I/usr/lusers/jkbest/inst/proj-7.2.0/include -I/usr/lusers/jkbest/inst/sqlite-3.33.0/include\"\\\n    LDFLAGS=\"-L/usr/lusers/jkbest/inst/proj-7.2.0/lib -lproj -L/usr/lusers/jkbest/inst/sqlite-3.33.0/lib -lsqlite3\"\n\nCompile and install (takes a while and benefits from multiple jobs):\n\nmake -jN\nmake install\n\nUpdate environmental variables."
  },
  {
    "objectID": "posts/down-the-rgdal-rabbit-hole/down-the-rgdal-rabbit-hole.html#rgdal",
    "href": "posts/down-the-rgdal-rabbit-hole/down-the-rgdal-rabbit-hole.html#rgdal",
    "title": "Down the rgdal rabbit hole",
    "section": "rgdal",
    "text": "rgdal\nIn R, run\ninstall.packages(\"rgdal\", configure.args = \"--host=host\")\nNo idea why the host argument is necessary, but it errors with messages about cross-compiling if it is not included."
  },
  {
    "objectID": "posts/puntlab-hyak-intro/puntlab_hyak_intro.html",
    "href": "posts/puntlab-hyak-intro/puntlab_hyak_intro.html",
    "title": "Introduction to Hyak",
    "section": "",
    "text": "NOTE: This information was accurate as of early 2020, but is now (April 2022) slightly out of date; e.g. the klone cluster is now available and interactive nodes are no longer a separate partition."
  },
  {
    "objectID": "posts/puntlab-hyak-intro/puntlab_hyak_intro.html#use-hyak-when-you-need-additional-resources",
    "href": "posts/puntlab-hyak-intro/puntlab_hyak_intro.html#use-hyak-when-you-need-additional-resources",
    "title": "Introduction to Hyak",
    "section": "Use Hyak when you need additional resources",
    "text": "Use Hyak when you need additional resources\n\nMore processing power\nModels or data don’t fit in RAM"
  },
  {
    "objectID": "posts/puntlab-hyak-intro/puntlab_hyak_intro.html#think-carefully-about-how-to-use-hyak",
    "href": "posts/puntlab-hyak-intro/puntlab_hyak_intro.html#think-carefully-about-how-to-use-hyak",
    "title": "Introduction to Hyak",
    "section": "Think carefully about how to use Hyak",
    "text": "Think carefully about how to use Hyak\n\nDo you really need to use it?\nHow can you use it efficiently?"
  },
  {
    "objectID": "posts/puntlab-hyak-intro/puntlab_hyak_intro.html#parallelization",
    "href": "posts/puntlab-hyak-intro/puntlab_hyak_intro.html#parallelization",
    "title": "Introduction to Hyak",
    "section": "Parallelization",
    "text": "Parallelization\n\nWhich steps are independent?\nWhich steps are bottlenecks?\nHow to minimize overhead?"
  },
  {
    "objectID": "posts/puntlab-hyak-intro/puntlab_hyak_intro.html#example-simulation-study",
    "href": "posts/puntlab-hyak-intro/puntlab_hyak_intro.html#example-simulation-study",
    "title": "Introduction to Hyak",
    "section": "Example: Simulation study",
    "text": "Example: Simulation study\n\nSpecify operating and estimation models\nSimulate 100 operating models\nFit 300 estimation models\nCalculate metrics\nSummarize results\n\nWhich steps are independent? Which step is the bottleneck? Are there steps that could be done together?"
  },
  {
    "objectID": "posts/puntlab-hyak-intro/puntlab_hyak_intro.html#example-simulation-study-fig",
    "href": "posts/puntlab-hyak-intro/puntlab_hyak_intro.html#example-simulation-study-fig",
    "title": "Introduction to Hyak",
    "section": "Example: Simulation study",
    "text": "Example: Simulation study\n\n\n\nSimulation study flow chart"
  },
  {
    "objectID": "posts/puntlab-hyak-intro/puntlab_hyak_intro.html#parallelization-strategies",
    "href": "posts/puntlab-hyak-intro/puntlab_hyak_intro.html#parallelization-strategies",
    "title": "Introduction to Hyak",
    "section": "Parallelization strategies",
    "text": "Parallelization strategies\n\nWhat step takes most time?\nWhich step is performed most often?\nAre there natural save points?\nWhich computations can be reused?\nAre there other limitations?"
  },
  {
    "objectID": "posts/puntlab-hyak-intro/puntlab_hyak_intro.html#checkpointing",
    "href": "posts/puntlab-hyak-intro/puntlab_hyak_intro.html#checkpointing",
    "title": "Introduction to Hyak",
    "section": "Checkpointing",
    "text": "Checkpointing\n\nSave progress\nRestart from saved position\nUse the ckpt queue"
  },
  {
    "objectID": "posts/puntlab-hyak-intro/puntlab_hyak_intro.html#what-is-hyak",
    "href": "posts/puntlab-hyak-intro/puntlab_hyak_intro.html#what-is-hyak",
    "title": "Introduction to Hyak",
    "section": "What is Hyak?",
    "text": "What is Hyak?\n\nMox\nIKT"
  },
  {
    "objectID": "posts/puntlab-hyak-intro/puntlab_hyak_intro.html#logging-in",
    "href": "posts/puntlab-hyak-intro/puntlab_hyak_intro.html#logging-in",
    "title": "Introduction to Hyak",
    "section": "Logging in",
    "text": "Logging in\nssh jkbest@mox.hyak.uw.edu\nKeep your phone handy for 2FA!"
  },
  {
    "objectID": "posts/puntlab-hyak-intro/puntlab_hyak_intro.html#how-to-choose-a-node-type",
    "href": "posts/puntlab-hyak-intro/puntlab_hyak_intro.html#how-to-choose-a-node-type",
    "title": "Introduction to Hyak",
    "section": "How to choose a node type",
    "text": "How to choose a node type\n\n\n\nChoosing a node type"
  },
  {
    "objectID": "posts/puntlab-hyak-intro/puntlab_hyak_intro.html#request-an-interactive-node",
    "href": "posts/puntlab-hyak-intro/puntlab_hyak_intro.html#request-an-interactive-node",
    "title": "Introduction to Hyak",
    "section": "Request an interactive node",
    "text": "Request an interactive node\n\nbuild node:\n\nsrun -p build --mem=10G --time=1:00:00 --pty /bin/bash\n\nstf-int node:\n\nsrun -p stf-int -A stf --cpus-per-task=28 --mem=120G\\\n    --time=1:00:00 --pty /bin/bash"
  },
  {
    "objectID": "posts/puntlab-hyak-intro/puntlab_hyak_intro.html#relevant-slurm-arguments",
    "href": "posts/puntlab-hyak-intro/puntlab_hyak_intro.html#relevant-slurm-arguments",
    "title": "Introduction to Hyak",
    "section": "Relevant SLURM arguments",
    "text": "Relevant SLURM arguments\n\nsrun\n\nRequest in interactive node\n\nsbatch\n\nSubmit a batch job\n\n-p\n\nPartition; node type to use\n\n-A\n\nAccount; usually stf\n\n--cpus-per-task\n\nThreads per program\n\n--tasks-per-node\n\nProcesses to run on each node\n\n--nodes\n\nNumber of nodes to request\n\n--mem\n\nAmount of RAM to request\n\n--time\n\nTime to reserve\n\n--pty\n\nProgram to start"
  },
  {
    "objectID": "posts/puntlab-hyak-intro/puntlab_hyak_intro.html#connecting-a-second-time",
    "href": "posts/puntlab-hyak-intro/puntlab_hyak_intro.html#connecting-a-second-time",
    "title": "Introduction to Hyak",
    "section": "Connecting a second time",
    "text": "Connecting a second time\nTo see which node you are using:\nsqueue -u jkbest\n  JOBID PARTITION ... NODELIST(REASON)\n1838469     build ... n2232\nFrom login node:\nssh n2232\nNow monitor usage with e.g. htop"
  },
  {
    "objectID": "posts/puntlab-hyak-intro/puntlab_hyak_intro.html#modules",
    "href": "posts/puntlab-hyak-intro/puntlab_hyak_intro.html#modules",
    "title": "Introduction to Hyak",
    "section": "Modules",
    "text": "Modules\nKey commands:\n\nmodule --help\n\nReminders\n\nmodule avail\n\nList available modules\n\nmodule apropos srchstr\n\nSearch modules for srchstr\n\nmodule load abcdef\n\nAttach module abcdef\n\nmodule unload abcdef\n\nDetach module abcdef"
  },
  {
    "objectID": "posts/puntlab-hyak-intro/puntlab_hyak_intro.html#using-a-build-node",
    "href": "posts/puntlab-hyak-intro/puntlab_hyak_intro.html#using-a-build-node",
    "title": "Introduction to Hyak",
    "section": "Using a build node",
    "text": "Using a build node\n\nRequest a build node.\nLoad the appropriate R module (or have your custom version accessible).\nRun R at the command line to open R.\nUse install.packages to install what you need."
  },
  {
    "objectID": "posts/puntlab-hyak-intro/puntlab_hyak_intro.html#using-an-stf-int-node",
    "href": "posts/puntlab-hyak-intro/puntlab_hyak_intro.html#using-an-stf-int-node",
    "title": "Introduction to Hyak",
    "section": "Using an stf-int node",
    "text": "Using an stf-int node\n\nRequest an stf-int node (see above).\nLoad the R module.\nOpen R and run:\n\nlibrary(TMB)\n\nrunExample(\"simple\")"
  },
  {
    "objectID": "posts/puntlab-hyak-intro/puntlab_hyak_intro.html#submit-a-batch-job-to-stf",
    "href": "posts/puntlab-hyak-intro/puntlab_hyak_intro.html#submit-a-batch-job-to-stf",
    "title": "Introduction to Hyak",
    "section": "Submit a batch job to stf",
    "text": "Submit a batch job to stf\nThe “driver script” runs your analysis, including loading packages, reading data, and sourceing other files with functions etc. The SLURM script specifies the resources you need and how to run your driver script. Examples of scripts that I have used:\n\nDriver script\nSLURM script\n\nNote that these are just example scripts, I haven’t made them self-contained so they won’t run for you. That said, the fitsims.slurm file should be a good starting point for your own SLURM scripts. In the directory with the SLURM script, you can submit the job:\nsbatch fitsims.slurm\nTips:\n\nWrite a single “driver” script\nUse Rscript to run the driver script"
  },
  {
    "objectID": "posts/puntlab-hyak-intro/puntlab_hyak_intro.html#there-are-three-places-to-store-files",
    "href": "posts/puntlab-hyak-intro/puntlab_hyak_intro.html#there-are-three-places-to-store-files",
    "title": "Introduction to Hyak",
    "section": "There are three places to store files",
    "text": "There are three places to store files\n\nHome\n\n\\home\\xyz\nPersistent, but low performance\nConfiguration files\n\n\n\nGScratch\n\n\\gscratch\\stf\\xyz\nCreate your own directory.\n30-day limit\nScratch directory for computations\n\n\n\nLolo\n\nLong-term tape storage\nMust bundle files together"
  },
  {
    "objectID": "posts/puntlab-hyak-intro/puntlab_hyak_intro.html#how-to-transfer-files",
    "href": "posts/puntlab-hyak-intro/puntlab_hyak_intro.html#how-to-transfer-files",
    "title": "Introduction to Hyak",
    "section": "How to transfer files",
    "text": "How to transfer files\n\nsftp\n\nConnect to mox.hyak.uw.edu\n\nsshfs\n\nAttach to local file system\n\ngit\n\nCode managed in e.g. a GitHub repo"
  },
  {
    "objectID": "posts/puntlab-hyak-intro/puntlab_hyak_intro.html#advanced-usage",
    "href": "posts/puntlab-hyak-intro/puntlab_hyak_intro.html#advanced-usage",
    "title": "Introduction to Hyak",
    "section": "Advanced usage",
    "text": "Advanced usage\n\nAdd module imports to your .bashrc file\nAdd other customizations\nSet up sshfs\nCompile your own R with MKL\nWrite your own module for everyone to use"
  },
  {
    "objectID": "posts/moving-to-quarto/moving-to-quarto.html",
    "href": "posts/moving-to-quarto/moving-to-quarto.html",
    "title": "Moving to Quarto",
    "section": "",
    "text": "Enter Quarto\nI’ve been hearing aboutQuarto for a while now, as a successor to the excellent R Markdown. It supports my two most-used languages, R and Julia. And it seemed pretty straightforward to generate a simple static website. I followed their guide to making a blog and everything more or less worked. I renamed the about.qmd page to index.qmd so that it would show up as the front page, and renamed index.qmd to posts.qmd. Then I added a resources directory to the website options and added a PDF of my CV. Everything else was mostly filling in the blanks. I was able to copy-paste my older blog posts, rename them as .qmd files, then debug a couple of quick issues and they were up and running. A push to Github and pointing Netlify at the new repo and I was up and running. Not quite as convenient because I don’t have automatic builds anymore, but I’m willing to make that compromise.\nBecause the Quarto site doesn’t have the same outline for an academic CV, I decided it was time to make a new PDF version. I used the vitae package, filling everything in as tribbles, and ended up with a very nice-looking CV that should be easy to keep up-to-date. The source for that is available in this Github repo. In the future I may use the same document to generate an HTML version of my CV to include on my website, but for now the PDF will do."
  }
]