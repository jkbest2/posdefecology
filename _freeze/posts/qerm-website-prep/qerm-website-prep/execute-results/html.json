{
  "hash": "1e1a3d2a7397b5a79fc0266743c4e6b5",
  "result": {
    "markdown": "---\ntitle: 'Set up a website for GitHub Pages'\nauthor: John Best\ndate: '2020-01-28'\nslug: qerm597-website\ncategories:\n    - QERM\n    - website\nsubtitle: 'QERM 597 Seminar'\ndescription: 'Use Git, GitHub, and `blogdown` to publish an example website on GitHub Pages'\nlastmod: '2020-01-28T10:54:43-08:00'\n---\n\nWe would like everyone to run a few steps before class on Wednesday so that we\ncan concentrate on the interesting parts such as customization and\npersonalization. We will be following the steps outlined in the presentations\nfrom the [Summer of `blogdown`](https://summer-of-blogdown.netlify.com/) slides\nby [Alison Hill](https://alison.rbind.io/) of RStudio. We will deviate from\nthese by using [GitHub pages](https://pages.github.com/) for hosting rather than\nNetlify. We'll be happy to explain the advantages and disadvantages of each in\nclass if anyone is interested. The `blogdown` package uses the static site\ngenerator [Hugo](https://gohugo.io) (we will explain what this means in class)\n\n# Learning objectives\n\nAt the end of class on Wednesday, you should be able to do the following:\n\n- Describe the difference between static and dynamic websites.\n- Initialize a website using Git and the `blogdown` package.\n- Edit the content of your website and use Git to publish the changes on GitHub\n  Pages.\n\n# Conceptual framework\n\nA webpage gives you a low-maintenance, [centralized web\npresence](https://www.posdefecology.net) that you control. It is a nice place to\n[collect your contact information](https://www.posdefecology.net/#contact) and\nsocial media accounts. Your site can act as your CV, hosting [preprints of your\npapers](https://www.posdefecology.net/#publications) and [links your\ntalks](https://www.posdefecology.net/#talks). It can also be a convenient place\nto keep information you want accesible anywhere. I regularly post [presentation\nslides (e.g. [for\nGSS](https://www.posdefecology.net/talk_slides/2019-11-14_gss/0945_best)) on my\nwebsite so that I don't need to worry about transferring them to the\npresentation computer. Blog posts can also be useful as a place where you can\nrecord the solution to some problem (e.g. [how to compile R on\nHyak](https://www.posdefecology.net/post/compiling-R)) you run into and solve.\nThe next time you see the same issue, the solution will be easy to find!\n\nAll websites are hosted on a server. When you type a URL into your browser, a\nconnection is opened between your computer and the server. Many (most?) websites\nthat you use regularly (think Amazon, Google, etc.) perform computation on the\nserver before sending the results to your computer. Amazon's servers figure out\nwhich products to recomment and then assemble a web page to send to your\nbrowser. By contrast, a *static website* requires only that the server send the\nrequested page. These websites are cheaper and easier to host, and arguably more\nsecure because no code is run on the server.\n\nFor these reasons, we will be creating a static site. We will use the R package\n[`blogdown`](https://bookdown.org/yihui/blogdown/) to make starting and editing\nour sites easier. `blogdown` uses the static site generator\n[Hugo](https://gohugo.io), but there are [many other\noptions](https://www.staticgen.com/). A static site generator renders content\nwritten in easily-editable formats like Markdown, and uses configuration files\nto determine the style and structure of your site. In essence you tell it what\nyou want your website to look like, and it figures out how to generate the HTML\nfiles to produce it. This means that we are never required to write HTML\ndirectly.\n\nHugo uses themes to automate layout and styling of your website. There are\n[hundreds of themes](https://themes.gohugo.io/) to choose from. We will be using\nthe [Academic theme](https://themes.gohugo.io/academic/). Unsurprisingly, it is\ngeared toward academics, with sections for papers, talks, and teaching. On the\nplus side, it is functional, flexible, and (in my opinion) nice looking. There\nare some drawbacks however. The number of customization options can be\noverwhelming, updates may break things (though there are always instructions for\nun-breaking), and it has become very popular:\n\n<blockquote class=\"twitter-tweet\"><p lang=\"en\" dir=\"ltr\">is everyone&#39;s website now hugo-academic theme?</p>&mdash; Dr. Juniper L. Simonis (they/them) (@JuniperLSimonis) <a href=\"https://twitter.com/JuniperLSimonis/status/1221843496933326848?ref_src=twsrc%5Etfw\">January 27, 2020</a></blockquote> <script async src=\"https://platform.twitter.com/widgets.js\" charset=\"utf-8\"></script>\n\nBut these aren't major because it's easy to eliminate pieces you don't need, you\ndon't lose much by upgrading, and it's not terribly difficult to switch themes\nlater.\n\n# Set up the website\n\nWe will use the example content from the Academic theme so that we have a\nworking site right off the bat. You will also be motivated to work on it because\nyou will want to change the example content as soon as possible. The following\ninstructions assume that you have Git installed on your computer and a GitHub\naccount. Review last week's Git notes if you need a refresh.\n\n## Prerequisites\n\nBecause we are hosting on GitHub Pages, we need to create two separate\nrepositories. We will following the instructions [from\nHugo](https://gohugo.io/hosting-and-deployment/hosting-on-github/). First we\nwill create a repository to contain the files that we edit to change the\nwebsite. On GitHub, create an empty (no `README` or `.gitignore`) repository\nnamed `website`.\n\nThe second repository will hold the rendered version of the site. The name of\nthis repository *does* matter; it must be `USER.github.io` (where `USER` is your\nGitHub username). This should also be an empty repository.\n\nCreate a directory named `website` and initialize a Git repository.\n\n```bash\nmkdir website\ncd website\ngit init\n```\n\nThen tell Git how to find the corresponding GitHub repository.\n\n```bash\ngit remote add origin https://github.com/USER/website.git\n```\n\nNow open R with `website` as your working directory (you can check this with\n`getwd`).\n\nWe will be using the `blogdown` package to simplify the creation of our website.\nSo the first step is to install `blogdown` if it is not already installed. As\nusual, this can be done with\n\n::: {.cell}\n\n```{.r .cell-code}\ninstall.packages(\"blogdown\")\n```\n:::\n\nEvery time we want to use `blogdown` after this, we can use\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(blogdown)\n```\n:::\n\nOnce `blogdown` is installed, we need to install Hugo, our static site\ngenerator. `blogdown` makes this easy; just run (in R)\n\n::: {.cell}\n\n```{.r .cell-code}\ninstall_hugo()\n```\n:::\n\nThe `blogdown` package also includes `update_hugo` and `hugo_version` functions.\n\n## Create the website\n\nNow we can create the website. I will use the [Academic\ntheme](https://themes.gohugo.io/academic/), which I use for [my personal\nwebsite](https://www.posdefecology.net). There are [many, many others to choose\nfrom](https://themes.gohugo.io/).\n\nAgain, `blogdown` provides a convenient way to start a new site.\n\n::: {.cell}\n\n```{.r .cell-code}\nnew_site(theme = \"gcushen/hugo-academic\",\n         sample = TRUE,\n         theme_example = TRUE,\n         empty_dirs = TRUE,\n         to_yaml = TRUE)\n```\n:::\n\nThis should open your browser to the example site.\n\n::: {.cell}\n\n:::\n\nIf it doesn't open automatically, you can go to https://localhost:4321. In the\nfuture, any time you're in the working directory for your website, you can use\nthe `blogdown::serve_site` function to do the same thing. This will live-reload\nany time you make changes.\n\n## Set up the Git structure\n\nThe rest of these instructions are in the terminal (i.e., not in R) and assume\nthat you are starting from the `website` directory.\n\nThe `public` subdirectory of `website` contains the HTML of our rendered\nwebsite. This needs to be uploaded to your `USER.github.io` GitHub repository.\nAt the terminal, starting from the `website` directory, we want to:\n\n1. change to the `public` subdirectory;\n2. initialize a Git repository;\n3. add the GitHub remote;\n4. stage all the files;\n5. commit them;\n6. and `push` them to GitHub.\n\nThis can be accomplished by running\n\n```bash\ncd public\ngit init\ngit remote add origin https://github.com/USER/USER.github.io.git\ngit add .\ngit commit -m \"Intialize with rendered example site\"\ngit push -u origin master\n```\n\nWe also want to track the rest of the files in `website`, because these are the\nones we edit by hand to change the content of the website. To do this, we \n\n1. change back to the `website` directory;\n2. add the `public` directory as a submodule (a Git repository within a Git\n   repository);\n3. stage everything;\n4. commit everything;\n5. and `push` it up to `GitHub`.\n\n```bash\ncd ..\ngit submodule add -b master https://github.com/USER/USER.github.io.git public\ngit add .\ngit commit -m \"Initialize with Academic example site\"\ngit push -u origin master\n```\n\n\nYou should now see files in the repositories you `pushed` to on GitHub. If you\npushed to the `USER.github.io` directory, you should also see the example site\nat https://USER.github.io. We will personalize these sites in class on\nWednesday.\n\n# Updating your site\n\nAny time you update the content of your site, it will need to be rebuilt and\npushed to GitHub before the changes are visible. So, after editing and saving, commit the changes (in the terminal):\n\n```bash\ngit add CHANGED_FILES\ngit commit -m \"Short description of changes\"\n```\n\nBack up these changes by pushing them to your `website` GitHub repository.\n\n```bash\ngit push\n```\n\nNow you need to build the site (which updates the files in the `public` directory). In R, run\n\n```r\nlibrary(blogdown)\nbuild_site()\n```\n\nAlternatively if you'd like to preview the changes you made, run\n\n```r\nlibrary(blogdown)\nserve_site()\n```\n\nThis also takes care of the build step.\n\nBack at the terminal, change into the `public` directory and commit the changes.\n\n```bash\ncd public\ngit add .\ngit commit -m \"Short description of changes\"\n```\n\nTo publish the changes, `push` them to your `USER.github.io` repository.\n\n```bash\ngit push\n```\n\nThese steps should be performed any time you want to update the content of your website.\n\n# Class on Wednesday\n\nWe will focus on personalizing these sites in class on Wednesday. To make the personalization process smoother, it is worth spending some time before class on what content you'd like to include, such as\n\n- a profile picture,\n- a short bio (1-2 paragraphs),\n- projects (e.g. dissertation chapters),\n- recent talks, and\n- any publications.\n\nIf you would like to learn more before class, you can go through the *Summer of\n`blogdown`* slides linked above, or check out the [`blogdown`\nbook](https://bookdown.org/yihui/blogdown/).",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": [],
    "engineDependencies": {},
    "preserve": {},
    "postProcess": null
  }
}